{
    "bowtie2_rules": {
        "platform": "Illumina",
        "mapping_params": {
            "default": ""
        },
        "load_env": "module load bioinfo-tools bowtie2/2.2.3 samtools/1.1"
    },
    "samtools_rules": {
        "load_env": "module load bioinfo-tools samtools/1.1 BEDTools/2.21.0 picard/1.118",
        "picard_jars": "/sw/apps/bioinfo/picard/1.118/milou"
    },
    "mapping_report_rules": {},
    "concoct_rules": {
        "load_env": "source activate  && module load bioinfo-tools MUMmer/3.23 # CONCOCT dev f4cb9fcb",
        "mapper": "bowtie2",
        "mapping_params": "default",
        "concoct_params": {
            "cutoff-1000-maxcluster-1000": "-c 1000 -l 1000"
        },
        "scripts_dir": "/scripts"
    },
    "prodigal_rules": {
        "load_env": "module load bioinfo-tools prodigal/2.60",
        "prodigal_params": {
            "default-meta": "-p meta"
        }
    },
    "rpsblast_rules": {
        "load_env": "module load bioinfo-tools blast/2.2.29+ gnuparallel/20140222",
        "rpsblast_params": {
            "default-concoct": "-outfmt '6 qseqid sseqid evalue pident score qstart qend sstart send length slen' -max_target_seqs 1 -evalue 0.00001"
        },
        "databases": {
            "cog": "/sw/data/uppnex/cdd/little_endian/Cog"
        },
        "parallel_params": "-N 10 --env PATH"
    },
    "hmmer_rules": {
        "load_env": "module load bioinfo-tools hmmer/3.1b1-gcc",
        "hmmer_params": {
            "default-concoct": "-E 0.0001 --cpu 16"
        },
        "databases": {
            "all_pog": ""
        }
    },
    "fastqc_rules": {
        "load_env": "module load bioinfo-tools FastQC/0.11.2"
    },
    "cutadapt_rules": {
        "load_env": "module load bioinfo-tools cutadapt/1.8.0",
        "trim_params": {
            "quality_and_indices": {
                "1": {
                    "trim_end": "-q 15,15",
                    "trim_start": "-u 0"
                    },
                "2": {
                    "trim_end": "-q 15,15",
                    "trim_start": "-u 0"
                    },
                "variable_template": "-n 3 --minimum-length 31 -a {R1_first}{R1_index}{R1_end} -G '^CGTGTGCTCTTCCGATCT' -A {R2_rev_end}{R2_rev_index}{R2_rev_first}",
                "common_variables": {
                    "R1_first": "AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC",
                    "R1_end": "ATCTCGTATGCCGTCTTCTGCTTG",
                    "R2_rev_end": "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT",
                    "R2_rev_first": "GTGTAGATCTCGGTGGTCGCCGTATCATT"
                }
            }
        }
    },
    "fastuniq_rules": {
    },
    "megahit_rules": {
        "load_env": "",
        "assembly_params": {"default": ""},
        "coassembly_params": {"default": "-m 0.99 --continue"},
        "filter_length_script": "BLUEPRINT_pipeline/toolbox/scripts/filter_fasta_on_length.py",
        "split_in_parts_script": "BLUEPRINT_pipeline/toolbox/scripts/split_fasta.py",
        "coassembly_pre_annotation_length_threshold": "200",
        "coassembly_pre_annotation_sequences_per_part": "100000"
    },
    "assembly_dir": ["assembly/"],
    "toolbox_dir": "toolbox"
}
